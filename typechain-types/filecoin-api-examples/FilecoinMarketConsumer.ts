/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type BigIntStruct = {
  val: PromiseOrValue<BytesLike>;
  neg: PromiseOrValue<boolean>;
};

export type BigIntStructOutput = [string, boolean] & {
  val: string;
  neg: boolean;
};

export interface FilecoinMarketConsumerInterface extends utils.Interface {
  functions: {
    "activationStatus()": FunctionFragment;
    "clientCollateral()": FunctionFragment;
    "dealClientActorId()": FunctionFragment;
    "dealCommitment()": FunctionFragment;
    "dealLabel()": FunctionFragment;
    "dealPricePerEpoch()": FunctionFragment;
    "dealProviderActorId()": FunctionFragment;
    "dealTerm()": FunctionFragment;
    "isDealActivated()": FunctionFragment;
    "providerCollateral()": FunctionFragment;
    "storeAll(uint64)": FunctionFragment;
    "storeClientCollateral(uint64)": FunctionFragment;
    "storeDealActivationStatus(uint64)": FunctionFragment;
    "storeDealClient(uint64)": FunctionFragment;
    "storeDealClientProvider(uint64)": FunctionFragment;
    "storeDealCommitment(uint64)": FunctionFragment;
    "storeDealLabel(uint64)": FunctionFragment;
    "storeDealTerm(uint64)": FunctionFragment;
    "storeDealTotalPrice(uint64)": FunctionFragment;
    "storeDealVerificaton(uint64)": FunctionFragment;
    "storeProviderCollateral(uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activationStatus"
      | "clientCollateral"
      | "dealClientActorId"
      | "dealCommitment"
      | "dealLabel"
      | "dealPricePerEpoch"
      | "dealProviderActorId"
      | "dealTerm"
      | "isDealActivated"
      | "providerCollateral"
      | "storeAll"
      | "storeClientCollateral"
      | "storeDealActivationStatus"
      | "storeDealClient"
      | "storeDealClientProvider"
      | "storeDealCommitment"
      | "storeDealLabel"
      | "storeDealTerm"
      | "storeDealTotalPrice"
      | "storeDealVerificaton"
      | "storeProviderCollateral"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activationStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clientCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dealClientActorId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dealCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dealLabel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dealPricePerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dealProviderActorId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dealTerm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isDealActivated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "providerCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storeAll",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeClientCollateral",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeDealActivationStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeDealClient",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeDealClientProvider",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeDealCommitment",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeDealLabel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeDealTerm",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeDealTotalPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeDealVerificaton",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeProviderCollateral",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clientCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dealClientActorId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dealCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dealLabel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dealPricePerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dealProviderActorId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dealTerm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDealActivated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storeAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeClientCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeDealActivationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeDealClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeDealClientProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeDealCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeDealLabel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeDealTerm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeDealTotalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeDealVerificaton",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeProviderCollateral",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FilecoinMarketConsumer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FilecoinMarketConsumerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activationStatus(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { activated: BigNumber; terminated: BigNumber }
    >;

    clientCollateral(
      overrides?: CallOverrides
    ): Promise<[BigIntStructOutput] & { collateral: BigIntStructOutput }>;

    dealClientActorId(overrides?: CallOverrides): Promise<[BigNumber]>;

    dealCommitment(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { data: string; size: BigNumber }>;

    dealLabel(overrides?: CallOverrides): Promise<[string]>;

    dealPricePerEpoch(
      overrides?: CallOverrides
    ): Promise<[BigIntStructOutput] & { price_per_epoch: BigIntStructOutput }>;

    dealProviderActorId(overrides?: CallOverrides): Promise<[BigNumber]>;

    dealTerm(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    isDealActivated(overrides?: CallOverrides): Promise<[boolean]>;

    providerCollateral(
      overrides?: CallOverrides
    ): Promise<[BigIntStructOutput] & { collateral: BigIntStructOutput }>;

    storeAll(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeClientCollateral(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeDealActivationStatus(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeDealClient(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeDealClientProvider(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeDealCommitment(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeDealLabel(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeDealTerm(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeDealTotalPrice(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeDealVerificaton(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeProviderCollateral(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activationStatus(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { activated: BigNumber; terminated: BigNumber }
  >;

  clientCollateral(overrides?: CallOverrides): Promise<BigIntStructOutput>;

  dealClientActorId(overrides?: CallOverrides): Promise<BigNumber>;

  dealCommitment(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { data: string; size: BigNumber }>;

  dealLabel(overrides?: CallOverrides): Promise<string>;

  dealPricePerEpoch(overrides?: CallOverrides): Promise<BigIntStructOutput>;

  dealProviderActorId(overrides?: CallOverrides): Promise<BigNumber>;

  dealTerm(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

  isDealActivated(overrides?: CallOverrides): Promise<boolean>;

  providerCollateral(overrides?: CallOverrides): Promise<BigIntStructOutput>;

  storeAll(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeClientCollateral(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeDealActivationStatus(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeDealClient(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeDealClientProvider(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeDealCommitment(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeDealLabel(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeDealTerm(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeDealTotalPrice(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeDealVerificaton(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeProviderCollateral(
    dealId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activationStatus(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { activated: BigNumber; terminated: BigNumber }
    >;

    clientCollateral(overrides?: CallOverrides): Promise<BigIntStructOutput>;

    dealClientActorId(overrides?: CallOverrides): Promise<BigNumber>;

    dealCommitment(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { data: string; size: BigNumber }>;

    dealLabel(overrides?: CallOverrides): Promise<string>;

    dealPricePerEpoch(overrides?: CallOverrides): Promise<BigIntStructOutput>;

    dealProviderActorId(overrides?: CallOverrides): Promise<BigNumber>;

    dealTerm(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    isDealActivated(overrides?: CallOverrides): Promise<boolean>;

    providerCollateral(overrides?: CallOverrides): Promise<BigIntStructOutput>;

    storeAll(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeClientCollateral(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeDealActivationStatus(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeDealClient(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeDealClientProvider(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeDealCommitment(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeDealLabel(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeDealTerm(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeDealTotalPrice(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeDealVerificaton(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeProviderCollateral(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    activationStatus(overrides?: CallOverrides): Promise<BigNumber>;

    clientCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    dealClientActorId(overrides?: CallOverrides): Promise<BigNumber>;

    dealCommitment(overrides?: CallOverrides): Promise<BigNumber>;

    dealLabel(overrides?: CallOverrides): Promise<BigNumber>;

    dealPricePerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    dealProviderActorId(overrides?: CallOverrides): Promise<BigNumber>;

    dealTerm(overrides?: CallOverrides): Promise<BigNumber>;

    isDealActivated(overrides?: CallOverrides): Promise<BigNumber>;

    providerCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    storeAll(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeClientCollateral(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeDealActivationStatus(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeDealClient(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeDealClientProvider(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeDealCommitment(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeDealLabel(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeDealTerm(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeDealTotalPrice(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeDealVerificaton(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeProviderCollateral(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activationStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clientCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dealClientActorId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dealCommitment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dealLabel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dealPricePerEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dealProviderActorId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dealTerm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDealActivated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    providerCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storeAll(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeClientCollateral(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeDealActivationStatus(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeDealClient(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeDealClientProvider(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeDealCommitment(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeDealLabel(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeDealTerm(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeDealTotalPrice(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeDealVerificaton(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeProviderCollateral(
      dealId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
