/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface TestBufferInterface extends utils.Interface {
  functions: {
    "checkBufferInitOverflow()": FunctionFragment;
    "testBufferAppend()": FunctionFragment;
    "testBufferAppendInt()": FunctionFragment;
    "testBufferAppendUint8()": FunctionFragment;
    "testBufferResizeAppendBytes()": FunctionFragment;
    "testBufferResizeAppendInt()": FunctionFragment;
    "testBufferResizeAppendManyBytes()": FunctionFragment;
    "testBufferResizeAppendUint8()": FunctionFragment;
    "testBufferZeroSized()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkBufferInitOverflow"
      | "testBufferAppend"
      | "testBufferAppendInt"
      | "testBufferAppendUint8"
      | "testBufferResizeAppendBytes"
      | "testBufferResizeAppendInt"
      | "testBufferResizeAppendManyBytes"
      | "testBufferResizeAppendUint8"
      | "testBufferZeroSized"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkBufferInitOverflow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBufferAppend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBufferAppendInt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBufferAppendUint8",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBufferResizeAppendBytes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBufferResizeAppendInt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBufferResizeAppendManyBytes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBufferResizeAppendUint8",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testBufferZeroSized",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkBufferInitOverflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBufferAppend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBufferAppendInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBufferAppendUint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBufferResizeAppendBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBufferResizeAppendInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBufferResizeAppendManyBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBufferResizeAppendUint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testBufferZeroSized",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestBuffer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestBufferInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkBufferInitOverflow(overrides?: CallOverrides): Promise<[void]>;

    testBufferAppend(overrides?: CallOverrides): Promise<[void]>;

    testBufferAppendInt(overrides?: CallOverrides): Promise<[void]>;

    testBufferAppendUint8(overrides?: CallOverrides): Promise<[void]>;

    testBufferResizeAppendBytes(overrides?: CallOverrides): Promise<[void]>;

    testBufferResizeAppendInt(overrides?: CallOverrides): Promise<[void]>;

    testBufferResizeAppendManyBytes(overrides?: CallOverrides): Promise<[void]>;

    testBufferResizeAppendUint8(overrides?: CallOverrides): Promise<[void]>;

    testBufferZeroSized(overrides?: CallOverrides): Promise<[void]>;
  };

  checkBufferInitOverflow(overrides?: CallOverrides): Promise<void>;

  testBufferAppend(overrides?: CallOverrides): Promise<void>;

  testBufferAppendInt(overrides?: CallOverrides): Promise<void>;

  testBufferAppendUint8(overrides?: CallOverrides): Promise<void>;

  testBufferResizeAppendBytes(overrides?: CallOverrides): Promise<void>;

  testBufferResizeAppendInt(overrides?: CallOverrides): Promise<void>;

  testBufferResizeAppendManyBytes(overrides?: CallOverrides): Promise<void>;

  testBufferResizeAppendUint8(overrides?: CallOverrides): Promise<void>;

  testBufferZeroSized(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    checkBufferInitOverflow(overrides?: CallOverrides): Promise<void>;

    testBufferAppend(overrides?: CallOverrides): Promise<void>;

    testBufferAppendInt(overrides?: CallOverrides): Promise<void>;

    testBufferAppendUint8(overrides?: CallOverrides): Promise<void>;

    testBufferResizeAppendBytes(overrides?: CallOverrides): Promise<void>;

    testBufferResizeAppendInt(overrides?: CallOverrides): Promise<void>;

    testBufferResizeAppendManyBytes(overrides?: CallOverrides): Promise<void>;

    testBufferResizeAppendUint8(overrides?: CallOverrides): Promise<void>;

    testBufferZeroSized(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    checkBufferInitOverflow(overrides?: CallOverrides): Promise<BigNumber>;

    testBufferAppend(overrides?: CallOverrides): Promise<BigNumber>;

    testBufferAppendInt(overrides?: CallOverrides): Promise<BigNumber>;

    testBufferAppendUint8(overrides?: CallOverrides): Promise<BigNumber>;

    testBufferResizeAppendBytes(overrides?: CallOverrides): Promise<BigNumber>;

    testBufferResizeAppendInt(overrides?: CallOverrides): Promise<BigNumber>;

    testBufferResizeAppendManyBytes(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testBufferResizeAppendUint8(overrides?: CallOverrides): Promise<BigNumber>;

    testBufferZeroSized(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkBufferInitOverflow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testBufferAppend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testBufferAppendInt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testBufferAppendUint8(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testBufferResizeAppendBytes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testBufferResizeAppendInt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testBufferResizeAppendManyBytes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testBufferResizeAppendUint8(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testBufferZeroSized(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
