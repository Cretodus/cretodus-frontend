/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface TestCBORInterface extends utils.Interface {
  functions: {
    "getTestData()": FunctionFragment;
    "getTestDataBigInt()": FunctionFragment;
    "getTestDataBigUint()": FunctionFragment;
    "getTestDataDefiniteLengthArray()": FunctionFragment;
    "getTestDataDefiniteLengthMap()": FunctionFragment;
    "getTestDataInvalidCBOR()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getTestData"
      | "getTestDataBigInt"
      | "getTestDataBigUint"
      | "getTestDataDefiniteLengthArray"
      | "getTestDataDefiniteLengthMap"
      | "getTestDataInvalidCBOR"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTestData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTestDataBigInt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTestDataBigUint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTestDataDefiniteLengthArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTestDataDefiniteLengthMap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTestDataInvalidCBOR",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getTestData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTestDataBigInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTestDataBigUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTestDataDefiniteLengthArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTestDataDefiniteLengthMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTestDataInvalidCBOR",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestCBOR extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestCBORInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTestData(overrides?: CallOverrides): Promise<[string]>;

    getTestDataBigInt(overrides?: CallOverrides): Promise<[string]>;

    getTestDataBigUint(overrides?: CallOverrides): Promise<[string]>;

    getTestDataDefiniteLengthArray(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTestDataDefiniteLengthMap(overrides?: CallOverrides): Promise<[string]>;

    getTestDataInvalidCBOR(overrides?: CallOverrides): Promise<[string]>;
  };

  getTestData(overrides?: CallOverrides): Promise<string>;

  getTestDataBigInt(overrides?: CallOverrides): Promise<string>;

  getTestDataBigUint(overrides?: CallOverrides): Promise<string>;

  getTestDataDefiniteLengthArray(overrides?: CallOverrides): Promise<string>;

  getTestDataDefiniteLengthMap(overrides?: CallOverrides): Promise<string>;

  getTestDataInvalidCBOR(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getTestData(overrides?: CallOverrides): Promise<string>;

    getTestDataBigInt(overrides?: CallOverrides): Promise<string>;

    getTestDataBigUint(overrides?: CallOverrides): Promise<string>;

    getTestDataDefiniteLengthArray(overrides?: CallOverrides): Promise<string>;

    getTestDataDefiniteLengthMap(overrides?: CallOverrides): Promise<string>;

    getTestDataInvalidCBOR(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getTestData(overrides?: CallOverrides): Promise<BigNumber>;

    getTestDataBigInt(overrides?: CallOverrides): Promise<BigNumber>;

    getTestDataBigUint(overrides?: CallOverrides): Promise<BigNumber>;

    getTestDataDefiniteLengthArray(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTestDataDefiniteLengthMap(overrides?: CallOverrides): Promise<BigNumber>;

    getTestDataInvalidCBOR(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getTestData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTestDataBigInt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTestDataBigUint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTestDataDefiniteLengthArray(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTestDataDefiniteLengthMap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTestDataInvalidCBOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
